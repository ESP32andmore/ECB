# Four automatically controlled PWM fan outputs (J4-J7), each set by four target temperatures, maintained by four Dallas sensor's temperatures. MQTT enabled. Home Assistant API disabled. DHCP enabled.
# Other control configurations available with modification of Dallas platform LAMBDA function. Contact us at esp32andmore@gmail.com for no cost customization.
# Ver 3.1

substitutions:
  devicename: ecb1
  friendlyname: ECB1
  fdevicename: ""
  ip: 192.168.0.178 # For static IP adressing

  ssid: !secret wifi_ssid
  password: !secret wifi_password

  alarm_temp: "50" # Threshold for alarm when implemented
  ptemp: "20"
  itemp: "0.1"

# Connect your Dallas sensors with logger: DEBUG enabled (factory flash default).
# Open the ESPHome webtool, connect to the ECB board, view the "Logs" window, hit "Reset",
# and search for Dallas scan addresses and replace the below addresses with your unique ones.
# Example Scan
#[18:16:42][D][dallas.sensor:084]:     0x8b3ca8f64935b228 4
#[18:16:42][D][dallas.sensor:084]:     0x783c0af6490d3628 2
#[18:16:42][D][dallas.sensor:084]:     0xc13c01f09642c928 1
#[18:16:42][D][dallas.sensor:084]:     0x043c6ef649772f28 3
  dallasaddress1: "0xc13c01f09642c928"
  dallasaddress2: "0x783c0af6490d3628"
  dallasaddress3: "0x043c6ef649772f28"
  dallasaddress4: "0x8b3ca8f64935b228"
  #dallasaddress1: "0x680000006a766a28"
  #dallasaddress2: "0x290000006b186628"
  #dallasaddress3: "0x690000006b6ef628"
  #dallasaddress4: "0xbc0000006b120328"



#external_components:
#  - source:
#      type: git
#      url: https://github.com/ssieb/esphome
#      ref: onewire
#    components: [ one_wire, gpio ]
#    refresh: 1min


esphome:
  name: ${devicename}
  friendly_name: ${friendlyname}

#  on_boot:
#  - priority: 900.0
#    then:
#      - lambda: |-
#          id(cpu_speed) = ESP.getCpuFreqMHz();

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf

preferences:
  flash_write_interval: 10min
    
wifi:
  ssid: ${ssid}
  #password: "none6666"
  password: ${password}
  #fast_connect: true
  #example static IP settings
  #manual_ip:
    #static_ip: ${ip}
    #gateway: 192.168.0.1
    #subnet: 255.255.255.0
    #dns1: 192.168.0.1
    #dns2: 8.8.8.8


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${fdevicename}Fallback Hotspot
    password: "esphome1"
    manual_ip:
      static_ip: 192.168.100.2
      gateway: 192.168.100.2
      subnet: 255.255.255.0
    
#captive_portal:

#esp32_improv:
  #authorizer: false
  #status_indicator: gpio_02
  #identify_duration: 20s
  #wifi_timeout: 30s

ota:
  - platform: esphome
    password: "esphome1"

#safe_mode:

#mqtt:
  #broker: 192.168.2.11   # use your own MQTT server address and credentials
  #username: "john"
  #password: "trek6666"
  #reboot_timeout: 0s

api:
  encryption:
    key: "itqzvhZMJj8wuTJX0GTOuL/ffESFROzUlmcO0u2+sfo="  #use your own HA generated Key
  reboot_timeout: 0s
  
web_server:
  port: 80
  version: 3
  local: true
  log: true


time:
  - platform: sntp
    id: current_time

debug:
  update_interval: 1s

logger:
  level: Debug

globals:
  - id: fan1_sum
    type: float
    restore_value: no
    initial_value: '0'
  - id: fan2_sum
    type: float
    restore_value: no
    initial_value: '0'
  - id: fan3_sum
    type: float
    restore_value: no
    initial_value: '0'
  - id: fan4_sum
    type: float
    restore_value: no
    initial_value: '0'
  - id: target1
    type: int
    restore_value: true
    initial_value: '26'
  - id: target2
    type: int
    restore_value: true
    initial_value: '26'
  - id: target3
    type: int
    restore_value: true
    initial_value: '26'
  - id: target4
    type: int
    restore_value: true
    initial_value: '26'
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: '0'
  - id: source1
    type: unsigned int
    restore_value: true
    initial_value: '0'
  - id: source2
    type: unsigned int
    restore_value: true
    initial_value: '0'
  - id: source3
    type: unsigned int
    restore_value: true
    initial_value: '0'
  - id: source4
    type: unsigned int
    restore_value: true
    initial_value: '0'


number:
  - platform: template
    id: set_target_temp_1
    name: ${fdevicename}Fan 1 Target
    optimistic: true
    min_value: 15
    max_value: 100
    initial_value: '26'
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    #entity_category: "CONFIG"
    icon: mdi:temperature-celsius
    #command_topic: ${devicename}/number/${devicename}_target_temp_1/command  #add for MQTT

  - platform: template
    id: set_target_temp_2
    name: ${fdevicename}Fan 2 Target
    optimistic: true
    min_value: 15
    max_value: 100
    initial_value: '26'
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    #entity_category: "CONFIG"
    icon: mdi:temperature-celsius
    #command_topic: ${devicename}/number/${devicename}_target_temp_2/command  #add for MQTT

  - platform: template
    id: set_target_temp_3
    name: ${fdevicename}Fan 3 Target
    optimistic: true
    min_value: 15
    max_value: 100
    initial_value: '26'
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    #entity_category: "CONFIG"
    icon: mdi:temperature-celsius
    #command_topic: ${devicename}/number/${devicename}_target_temp_3/command  #add for MQTT
    
  - platform: template
    id: set_target_temp_4
    name: ${fdevicename}Fan 4 Target
    optimistic: true
    min_value: 15
    max_value: 100
    initial_value: '26'
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    #entity_category: "CONFIG"
    icon: mdi:temperature-celsius
    #command_topic: ${devicename}/number/${devicename}_target_temp_4/command  #add for MQTT

  - platform: template
    id: set_alarm_temp
    name: ${fdevicename}Alarm Value
    optimistic: true
    min_value: 15
    max_value: 100
    initial_value: ${alarm_temp}
    step: 1
    restore_value: true
    #unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    entity_category: "CONFIG"
    icon: mdi:thermometer
  
switch:
  - platform: restart
    name: ${fdevicename}Restart
    entity_category: "CONFIG"
    icon: mdi:restart

  - platform: gpio
    name: ${fdevicename}Relay 0
    pin: GPIO18
    id: relay_0
    restore_mode: restore_default_off
    entity_category: "CONFIG"
    icon: mdi:power

  - platform: template
    id: auto_fan1
    name: ${fdevicename}Fan 1 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    icon: mdi:fan-auto     
    turn_off_action:
      then:
        lambda: |-
          auto calla = id(fan1_speed).turn_on();
          calla.set_speed(1);
          calla.perform();
          auto callb = id(fan1_speed).turn_off();
          callb.perform();

  - platform: template
    id: auto_fan2
    name: ${fdevicename}Fan 2 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true 
    icon: mdi:fan-auto   
    turn_off_action:
       then:
        lambda: |-
          auto calla = id(fan2_speed).turn_on();
          calla.set_speed(1);
          calla.perform();
          auto callb = id(fan2_speed).turn_off();
          callb.perform();

  - platform: template
    id: auto_fan3
    name: ${fdevicename}Fan 3 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true 
    icon: mdi:fan-auto 
    turn_off_action:
       then:
        lambda: |-
          auto calla = id(fan3_speed).turn_on();
          calla.set_speed(1);
          calla.perform();
          auto callb = id(fan3_speed).turn_off();
          callb.perform();

  - platform: template
    id: auto_fan4
    name: ${fdevicename}Fan 4 Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true 
    icon: mdi:fan-auto 
    turn_off_action:
       then:
        lambda: |-
          auto calla = id(fan4_speed).turn_on();
          calla.set_speed(1);
          calla.perform();
          auto callb = id(fan4_speed).turn_off();
          callb.perform();

  - platform: gpio
    id: oc_port
    name: ${fdevicename}OC Port
    restore_mode: ALWAYS_ON
    entity_category: "CONFIG"
    icon: mdi:light-switch
    pin:
      number: 26
      mode:
        output: true
        pullup: true
  
one_wire:
  - platform: gpio
    pin: GPIO27

  
output:
  - platform: ledc
    pin: GPIO13
    id: fan1
    frequency: 25600Hz
    
  - platform: ledc
    pin: GPIO14
    id: fan2
    frequency: 25600Hz
    
  - platform: ledc
    pin: GPIO25
    id: fan3
    frequency: 25600Hz
    
  - platform: ledc
    pin: GPIO32
    id: fan4
    frequency: 25600Hz

  - platform: ledc
    pin:
      number: GPIO2
      ignore_strapping_warning: true
    id: gpio_02

light:
  - platform: monochromatic
    id: alarm_light
    output: gpio_02
    name: ${fdevicename}Alarm Light
    entity_category: "CONFIG"
    icon: mdi:light-alert
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
 

#font:
#  - file: "fonts/comic-sans-ms/ComicSansMS3.ttf"
#    id: my_font
#    size: 12

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22
    scan: True
    frequency: 400khz
  - id: bus_b
    sda: GPIO16
    scl: GPIO17
    scan: True
    frequency: 800khz

#display:
#  - platform: ssd1306_i2c
#    i2c_id: bus_a
#    address: 0x3D
#    model: "SSD1306 128x64"
#    id: my_display
#    pages:
#      - id: page1
#        lambda: |-
#          it.print(0, 0, id(my_font), "ESP32 Control Board");

select:
  - platform: template
    name: ${fdevicename}Fan 1 Sensor
    id: fan_1_source
    icon: mdi:temperature-check
    optimistic: true
    restore_value: true
    options:
      - AHT20T
      - AHT20H
      - Dallas_1
      - Dallas_2
      - Dallas_3
      - Dallas_4
      - SHT40T
      - SHT40H
    initial_option: AHT20T
    on_value:
      then:
        - globals.set:
            id: fan1_sum
            value: '0'

  - platform: template
    name: ${fdevicename}Fan 2 Sensor
    id: fan_2_source
    icon: mdi:temperature-check
    optimistic: true
    restore_value: true
    options:
      - AHT20T
      - AHT20H
      - Dallas_1
      - Dallas_2
      - Dallas_3
      - Dallas_4
      - SHT40T
      - SHT40H
    initial_option: AHT20T
    on_value:
      then:
        - globals.set:
            id: fan2_sum
            value: '0'

  - platform: template
    name: ${fdevicename}Fan 3 Sensor
    id: fan_3_source
    icon: mdi:temperature-check
    optimistic: true
    restore_value: true
    options:
      - AHT20T
      - AHT20H
      - Dallas_1
      - Dallas_2
      - Dallas_3
      - Dallas_4
      - SHT40T
      - SHT40H
    initial_option: AHT20T
    on_value:
      then:
        - globals.set:
            id: fan3_sum
            value: '0'

  - platform: template
    name: ${fdevicename}Fan 4 Sensor
    id: fan_4_source
    icon: mdi:temperature-check
    optimistic: true
    restore_value: true
    options:
      - AHT20T
      - ANT20H
      - Dallas_1
      - Dallas_2
      - Dallas_3
      - Dallas_4
      - SHT40T
      - SHT40H
    initial_option: AHT20T
    on_value:
      then:
        - globals.set:
            id: fan4_sum
            value: '0'

interval:
  - interval: 2000ms
    startup_delay: 2s
    then:
      #- display.page.show_next: my_display
      #- component.update: my_display

      - if: 
          condition:
            for:
              time: 10s
              condition:
                lambda: 'return (id(AHT20T).state >= id(set_alarm_temp).state) || (id(Dallas_1).state >= id(set_alarm_temp).state) || (id(Dallas_2).state >= id(set_alarm_temp).state) || 
                          (id(Dallas_3).state >= id(set_alarm_temp).state) || (id(Dallas_4).state >= id(set_alarm_temp).state) || (id(SHT40T).state >= id(set_alarm_temp).state);'

          then: 
            - light.turn_on:
                id: alarm_light
                effect: 'Fast Pulse'
            - lambda: !lambda |-
                id(alarm_sen).publish_state(true);
          else: 
            - light.turn_off:
                id: alarm_light
            - lambda: !lambda |-
                id(alarm_sen).publish_state(false);
      - lambda: !lambda |
          if (id(auto_fan1).state) {
            float fan_actual_temp1;
            auto index1 = id(fan_1_source).active_index();
            //if (index1.has_value()) {
            //  ESP_LOGE("Fan1", "Index %d ", index1.value());
            //} else {
            //  ESP_LOGE("Fan1", "No option is active");
            //}
            if (index1.value() == 0) fan_actual_temp1 =  id(AHT20T).state;
            else if (index1.value() == 1) fan_actual_temp1 = id(AHT20H).state;
            else if (index1.value() == 2) fan_actual_temp1 = id(Dallas_1).state;
            else if (index1.value() == 3) fan_actual_temp1 = id(Dallas_2).state;
            else if (index1.value() == 4) fan_actual_temp1 = id(Dallas_3).state;
            else if (index1.value() == 5) fan_actual_temp1 = id(Dallas_4).state;
            else if (index1.value() == 6) fan_actual_temp1 = id(SHT40T).state;
            else if (index1.value() == 7) fan_actual_temp1 = id(SHT40H).state;
            else ESP_LOGE("Fan1", "Index %d does not exist", index1);
            float fan_desired_temp1 = id(set_target_temp_1).state;
            float diff1 = fan_actual_temp1 - fan_desired_temp1;
            id(fan1_sum) =id(fan1_sum) + diff1;
            float fan_pdiff1=diff1 * $ptemp;
            float fan_idiff1= id(fan1_sum) * $itemp;
            float fan_set_speed1 = fan_pdiff1 + fan_idiff1;
            if (fan_set_speed1 >100) fan_set_speed1 = 100;
            if (fan_set_speed1 <10) fan_set_speed1 = 1;
            if (id(fan1_sum) >100) id(fan1_sum) = 100;
            if (id(fan1_sum) < -100) id(fan1_sum) = -100;
            if (fan_set_speed1 <10) {
              fan_set_speed1 = 1;
              auto calloff1 = id(fan1_speed).turn_off();           
              calloff1.set_speed(fan_set_speed1);
              calloff1.perform();
            } else {
              auto call1 = id(fan1_speed).turn_on();
              call1.set_speed(fan_set_speed1);
              call1.perform();
            }
          }

      - lambda: !lambda |
          if (id(auto_fan2).state) {
            float fan_actual_temp;
            auto index = id(fan_2_source).active_index();
            if (index.value() == 0) fan_actual_temp =  id(AHT20T).state;
            else if (index.value() == 1) fan_actual_temp = id(AHT20H).state;
            else if (index.value() == 2) fan_actual_temp = id(Dallas_1).state;
            else if (index.value() == 3) fan_actual_temp = id(Dallas_2).state;
            else if (index.value() == 4) fan_actual_temp = id(Dallas_3).state;
            else if (index.value() == 5) fan_actual_temp = id(Dallas_4).state;
            else if (index.value() == 6) fan_actual_temp = id(SHT40T).state;
            else if (index.value() == 7) fan_actual_temp = id(SHT40H).state;
            else ESP_LOGE("Fan1", "Index %d does not exist", index);

            float fan_desired_temp = id(set_target_temp_2).state;
            float diff = fan_actual_temp - fan_desired_temp;
            id(fan2_sum) =id(fan2_sum) + diff;
            float fan_pdiff=diff * $ptemp;
            float fan_idiff= id(fan2_sum) * $itemp;
            float fan_set_speed = fan_pdiff + fan_idiff;
            if (fan_set_speed >100) fan_set_speed =100;
            if (id(fan2_sum) >100) id(fan2_sum) = 100;
            if (id(fan2_sum) < -100) id(fan2_sum) = -100;
            if (fan_set_speed <10) {
              fan_set_speed=1;
              auto calloff = id(fan2_speed).turn_off();           
              calloff.set_speed(fan_set_speed);
              calloff.perform();
            } else {
              auto call = id(fan2_speed).turn_on();
              call.set_speed(fan_set_speed);
              call.perform();
            }
          }

      - lambda: !lambda |
          if (id(auto_fan3).state) {
            float fan_actual_temp;
            auto index = id(fan_3_source).active_index();
            if (index.value() == 0) fan_actual_temp =  id(AHT20T).state;
            else if (index.value() == 1) fan_actual_temp = id(AHT20H).state;
            else if (index.value() == 2) fan_actual_temp = id(Dallas_1).state;
            else if (index.value() == 3) fan_actual_temp = id(Dallas_2).state;
            else if (index.value() == 4) fan_actual_temp = id(Dallas_3).state;
            else if (index.value() == 5) fan_actual_temp = id(Dallas_4).state;
            else if (index.value() == 6) fan_actual_temp = id(SHT40T).state;
            else if (index.value() == 7) fan_actual_temp = id(SHT40H).state;
            else ESP_LOGE("Fan1", "Index %d does not exist", index);

            float fan_desired_temp = id(set_target_temp_3).state;
            float diff = fan_actual_temp - fan_desired_temp;
            id(fan3_sum) =id(fan3_sum) + diff;
            float fan_pdiff=diff * $ptemp;
            float fan_idiff= id(fan3_sum) * $itemp;
            float fan_set_speed = fan_pdiff + fan_idiff;
            if (fan_set_speed >100) fan_set_speed =100;
            if (id(fan3_sum) >100) id(fan3_sum) = 100;
            if (id(fan3_sum) < -100) id(fan3_sum) = -100;
            if (fan_set_speed <10) {
              fan_set_speed=1;
              auto calloff = id(fan3_speed).turn_off();           
              calloff.set_speed(fan_set_speed);
              calloff.perform();
            } else {
              auto call = id(fan3_speed).turn_on();
              call.set_speed(fan_set_speed);
              call.perform();
            }
          }

      - lambda: !lambda |    
          if (id(auto_fan4).state) {
            float fan_actual_temp;
            auto index = id(fan_4_source).active_index();
            if (index.value() == 0) fan_actual_temp =  id(AHT20T).state;
            else if (index.value() == 1) fan_actual_temp = id(AHT20H).state;
            else if (index.value() == 2) fan_actual_temp = id(Dallas_1).state;
            else if (index.value() == 3) fan_actual_temp = id(Dallas_2).state;
            else if (index.value() == 4) fan_actual_temp = id(Dallas_3).state;
            else if (index.value() == 5) fan_actual_temp = id(Dallas_4).state;
            else if (index.value() == 6) fan_actual_temp = id(SHT40T).state;
            else if (index.value() == 7) fan_actual_temp = id(SHT40H).state;
            else ESP_LOGE("Fan1", "Index %d does not exist", index);

            float fan_desired_temp = id(set_target_temp_4).state;
            float diff = fan_actual_temp - fan_desired_temp;
            id(fan4_sum) =id(fan4_sum) + diff;
            float fan_pdiff=diff * $ptemp;
            float fan_idiff= id(fan4_sum) * $itemp;
            float fan_set_speed = fan_pdiff + fan_idiff;
            if (id(fan4_sum) >100) id(fan4_sum) = 100;
            if (id(fan4_sum) < -100) id(fan4_sum) = -100;
            if (fan_set_speed >100) fan_set_speed =100;
            auto call = id(fan4_speed).turn_on();
            if (fan_set_speed <10) {
              fan_set_speed=1;
              auto calloff = id(fan4_speed).turn_off();           
              calloff.set_speed(fan_set_speed);
              calloff.perform();
            } else {
              auto call = id(fan4_speed).turn_on();
              call.set_speed(fan_set_speed);
              call.perform();
            }
          }

sensor:
  - platform: sht4x
    i2c_id: bus_a
    address: 0x44
    heater_max_duty: 0.00
    heater_power: "Low"
    heater_time: "Short"
    update_interval: 2s
    temperature:
      name: ${fdevicename}SHT40 Temp
      id: SHT40T
      filters:
        - filter_out: NaN
        - filter_out: nan
        - offset: 0.0
      icon: mdi:thermometer

    humidity:
      name: ${fdevicename}SHT40 Humidity
      id: SHT40H
      filters:
        - filter_out: NaN
        - filter_out: nan
        - offset: 0.0
      icon: mdi:humidity

  - platform: aht10
    i2c_id: bus_b
    address: 0x38
    variant: AHT20
    temperature:
      id: AHT20T
      name: ${fdevicename}AHT20 Temp
      device_class: "TEMPERATURE"
      icon: mdi:thermometer
      filters:
      - filter_out: NaN
      - offset: -6.0
    humidity:
      name: ${fdevicename}AHT20 Humidity
      id: AHT20H
      device_class: "HUMIDITY"
      icon: mdi:water-percent
    update_interval: 2s

  - platform: dallas_temp
    address: ${dallasaddress1}
    id: Dallas_1
    name: ${fdevicename}Dallas Temp 1
    update_interval: 2s
    #index: 0
    filters:
      - filter_out: NaN
      - offset: 0.0
      #- lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°C"
    device_class: "TEMPERATURE"
    icon: mdi:thermometer

  - platform: dallas_temp
    address: ${dallasaddress2}
    id: Dallas_2
    name: ${fdevicename}Dallas Temp 2
    update_interval: 2s
    #index: 1
    filters:
      - filter_out: NaN
      - offset: 0.0    #Calibration
    unit_of_measurement: "°C"
    device_class: "TEMPERATURE"
    icon: mdi:thermometer
    
  - platform: dallas_temp
    address: ${dallasaddress3}
    id: Dallas_3
    name: ${fdevicename}Dallas Temp 3
    update_interval: 2s
    #index: 2
    filters:
      - filter_out: NaN
      - offset: 0.0   #Calibration
    unit_of_measurement: "°C"
    device_class: "TEMPERATURE"
    icon: mdi:thermometer

  - platform: dallas_temp
    address: ${dallasaddress4}
    id: Dallas_4
    name: ${fdevicename}Dallas Temp 4
    update_interval: 2s
    #index: 3
    filters:
      - filter_out: NaN
      - offset: 0.0   #Calibration
    unit_of_measurement: "°C"
    device_class: "TEMPERATURE"
    icon: mdi:thermometer

  - platform: pulse_counter
    pin: GPIO33
    unit_of_measurement: 'rpm'
    name: ${fdevicename}Fan 1 Monitor
    device_class: "SPEED"
    icon: mdi:fan
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO34
    unit_of_measurement: 'rpm'
    name: ${fdevicename}Fan 2 Monitor
    device_class: "SPEED"
    icon: mdi:fan
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO35
    unit_of_measurement: 'rpm'
    name: ${fdevicename}Fan 3 Monitor
    device_class: "SPEED"
    icon: mdi:fan
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO39
    unit_of_measurement: 'rpm'
    name: ${fdevicename}Fan 4 Monitor
    device_class: "SPEED"
    icon: mdi:fan
    update_interval: 5s
    filters:
      - multiply: 0.5       
        
  - platform: wifi_signal
    name: ${fdevicename}WiFi
    entity_category: "DIAGNOSTIC"
    icon: mdi:wifi
    web_server:
      sorting_weight: 4
    update_interval: 30s
  
  - platform: uptime
    name: ${fdevicename}Uptime
    entity_category: "DIAGNOSTIC"
    icon: mdi:timer-sync-outline
    web_server:
      sorting_weight: 6
    update_interval: 1s

  - platform: template
    name: ${fdevicename}CPU Speed
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    entity_category: "DIAGNOSTIC"
    icon: mdi:sine-wave
    web_server:
      sorting_weight: 5
    lambda: |-
      return (id(cpu_speed));

#    id: sys_esp_temperature
#    name: ${fdevicename}ESP Temp
#    lambda: return temperatureRead();
#    unit_of_measurement: °C
#    entity_category: "DIAGNOSTIC"
#    icon: mdi:thermometer
#    web_server:
#      sorting_weight: 7
#    update_interval: 30s

  - platform: debug
    free:
      name: ${fdevicename}Heap Free
      entity_category: "DIAGNOSTIC"
      web_server:
        sorting_weight: 9
    block:
      name: ${fdevicename}Heap Max Block
      entity_category: "DIAGNOSTIC"
      web_server:
        sorting_weight: 10
    loop_time:
      name: ${fdevicename}Loop Time
      entity_category: "DIAGNOSTIC"
      web_server:
        sorting_weight: 8
      
      

fan:
  - platform: speed
    output: fan1
    id: fan1_speed
    name: ${fdevicename}Fan 1 Speed
    #entity_category: "CONFIG"
    icon: mdi:fan
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: speed
    output: fan2
    id: fan2_speed
    name: ${fdevicename}Fan 2 Speed
    #entity_category: "CONFIG"
    icon: mdi:fan
    restore_mode: RESTORE_DEFAULT_OFF
          
  - platform: speed
    output: fan3
    id: fan3_speed
    name: ${fdevicename}Fan 3 Speed
    #entity_category: "CONFIG"
    icon: mdi:fan
    restore_mode: RESTORE_DEFAULT_OFF
 
  - platform: speed
    output: fan4
    id: fan4_speed
    name: ${fdevicename}Fan 4 Speed
    #entity_category: "CONFIG"
    icon: mdi:fan
    restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - platform: template
    name: ${fdevicename}Device Sensor
    entity_category: "DIAGNOSTIC"
    icon: mdi:devices
    web_server:
      sorting_weight: 14
    lambda: |-
      return {"ESP32 Control Board"};

  - platform: version
    name: ${fdevicename}Version
    entity_category: "DIAGNOSTIC"
    web_server:
      sorting_weight: 15

  - platform: wifi_info
    ip_address:
      name: ${fdevicename}IP Address
      entity_category: "DIAGNOSTIC"
      icon: mdi:ip
      web_server:
        sorting_weight: 0
    ssid:
      name: ${fdevicename}Connected SSID
      entity_category: "DIAGNOSTIC"
      icon: mdi:wifi
      web_server:
        sorting_weight: 2
    bssid:
      name: ${fdevicename}Connected BSSID
      entity_category: "DIAGNOSTIC"
      icon: mdi:wifi
      web_server:
        sorting_weight: 3
    mac_address:
      name: ${fdevicename}Mac Wifi Address
      entity_category: "DIAGNOSTIC"
      icon: mdi:wifi
      web_server:
        sorting_weight: 1

  - platform: debug
 #   device:
 #     name: ${fdevicename}Device Info
    reset_reason:
      name: ${fdevicename}Reset Reason
      entity_category: "DIAGNOSTIC"
  
binary_sensor:
  - platform: status
    name: ${fdevicename}Status
    entity_category: "DIAGNOSTIC"
    icon: mdi:lan-connect
  - platform: template
    id: alarm_sen
    name: ${fdevicename}Alarm
    icon: mdi:fire